// Generated by view binder compiler. Do not edit!
package com.example.gathernow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gathernow.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEventInfoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton cancelButton;

  @NonNull
  public final ScrollView content;

  @NonNull
  public final AppCompatButton deleteButton;

  @NonNull
  public final TextView eventDate;

  @NonNull
  public final TextView eventDescription;

  @NonNull
  public final TextView eventDuration;

  @NonNull
  public final TextView eventDurationTitle;

  @NonNull
  public final ImageView eventImg;

  @NonNull
  public final TextView eventLocation;

  @NonNull
  public final TextView eventPrice;

  @NonNull
  public final TextView eventRegisterDate;

  @NonNull
  public final TextView eventRegisterDateTitle;

  @NonNull
  public final TextView eventRegisterTime;

  @NonNull
  public final TextView eventTime;

  @NonNull
  public final TextView eventTimeTitle;

  @NonNull
  public final TextView eventTitle;

  @NonNull
  public final Guideline horizontalGuideline;

  @NonNull
  public final TextView languageTitle;

  @NonNull
  public final TextView languages;

  @NonNull
  public final TextView locationTitle;

  @NonNull
  public final FragmentContainerView mapFragment;

  @NonNull
  public final TextView numMaxParticipants;

  @NonNull
  public final TextView numParticipantsTitle;

  @NonNull
  public final TextView numRegParticipants;

  @NonNull
  public final TextView participantsDash;

  @NonNull
  public final TextView priceTitle;

  @NonNull
  public final ImageButton profileImg;

  @NonNull
  public final TextView profileName;

  @NonNull
  public final AppCompatButton registerButton;

  @NonNull
  public final AppCompatButton resultButton;

  @NonNull
  public final Guideline verticalGuideline;

  @NonNull
  public final Guideline verticalRightGuideline;

  @NonNull
  public final AppCompatButton viewApplicantsButton;

  private ActivityEventInfoBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton cancelButton, @NonNull ScrollView content,
      @NonNull AppCompatButton deleteButton, @NonNull TextView eventDate,
      @NonNull TextView eventDescription, @NonNull TextView eventDuration,
      @NonNull TextView eventDurationTitle, @NonNull ImageView eventImg,
      @NonNull TextView eventLocation, @NonNull TextView eventPrice,
      @NonNull TextView eventRegisterDate, @NonNull TextView eventRegisterDateTitle,
      @NonNull TextView eventRegisterTime, @NonNull TextView eventTime,
      @NonNull TextView eventTimeTitle, @NonNull TextView eventTitle,
      @NonNull Guideline horizontalGuideline, @NonNull TextView languageTitle,
      @NonNull TextView languages, @NonNull TextView locationTitle,
      @NonNull FragmentContainerView mapFragment, @NonNull TextView numMaxParticipants,
      @NonNull TextView numParticipantsTitle, @NonNull TextView numRegParticipants,
      @NonNull TextView participantsDash, @NonNull TextView priceTitle,
      @NonNull ImageButton profileImg, @NonNull TextView profileName,
      @NonNull AppCompatButton registerButton, @NonNull AppCompatButton resultButton,
      @NonNull Guideline verticalGuideline, @NonNull Guideline verticalRightGuideline,
      @NonNull AppCompatButton viewApplicantsButton) {
    this.rootView = rootView;
    this.cancelButton = cancelButton;
    this.content = content;
    this.deleteButton = deleteButton;
    this.eventDate = eventDate;
    this.eventDescription = eventDescription;
    this.eventDuration = eventDuration;
    this.eventDurationTitle = eventDurationTitle;
    this.eventImg = eventImg;
    this.eventLocation = eventLocation;
    this.eventPrice = eventPrice;
    this.eventRegisterDate = eventRegisterDate;
    this.eventRegisterDateTitle = eventRegisterDateTitle;
    this.eventRegisterTime = eventRegisterTime;
    this.eventTime = eventTime;
    this.eventTimeTitle = eventTimeTitle;
    this.eventTitle = eventTitle;
    this.horizontalGuideline = horizontalGuideline;
    this.languageTitle = languageTitle;
    this.languages = languages;
    this.locationTitle = locationTitle;
    this.mapFragment = mapFragment;
    this.numMaxParticipants = numMaxParticipants;
    this.numParticipantsTitle = numParticipantsTitle;
    this.numRegParticipants = numRegParticipants;
    this.participantsDash = participantsDash;
    this.priceTitle = priceTitle;
    this.profileImg = profileImg;
    this.profileName = profileName;
    this.registerButton = registerButton;
    this.resultButton = resultButton;
    this.verticalGuideline = verticalGuideline;
    this.verticalRightGuideline = verticalRightGuideline;
    this.viewApplicantsButton = viewApplicantsButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEventInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEventInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_event_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEventInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel_button;
      AppCompatButton cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.content;
      ScrollView content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.delete_button;
      AppCompatButton deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.event_date;
      TextView eventDate = ViewBindings.findChildViewById(rootView, id);
      if (eventDate == null) {
        break missingId;
      }

      id = R.id.event_description;
      TextView eventDescription = ViewBindings.findChildViewById(rootView, id);
      if (eventDescription == null) {
        break missingId;
      }

      id = R.id.event_duration;
      TextView eventDuration = ViewBindings.findChildViewById(rootView, id);
      if (eventDuration == null) {
        break missingId;
      }

      id = R.id.event_duration_title;
      TextView eventDurationTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventDurationTitle == null) {
        break missingId;
      }

      id = R.id.event_img;
      ImageView eventImg = ViewBindings.findChildViewById(rootView, id);
      if (eventImg == null) {
        break missingId;
      }

      id = R.id.event_location;
      TextView eventLocation = ViewBindings.findChildViewById(rootView, id);
      if (eventLocation == null) {
        break missingId;
      }

      id = R.id.event_price;
      TextView eventPrice = ViewBindings.findChildViewById(rootView, id);
      if (eventPrice == null) {
        break missingId;
      }

      id = R.id.event_register_date;
      TextView eventRegisterDate = ViewBindings.findChildViewById(rootView, id);
      if (eventRegisterDate == null) {
        break missingId;
      }

      id = R.id.event_register_date_title;
      TextView eventRegisterDateTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventRegisterDateTitle == null) {
        break missingId;
      }

      id = R.id.event_register_time;
      TextView eventRegisterTime = ViewBindings.findChildViewById(rootView, id);
      if (eventRegisterTime == null) {
        break missingId;
      }

      id = R.id.event_time;
      TextView eventTime = ViewBindings.findChildViewById(rootView, id);
      if (eventTime == null) {
        break missingId;
      }

      id = R.id.event_time_title;
      TextView eventTimeTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventTimeTitle == null) {
        break missingId;
      }

      id = R.id.event_title;
      TextView eventTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventTitle == null) {
        break missingId;
      }

      id = R.id.horizontalGuideline;
      Guideline horizontalGuideline = ViewBindings.findChildViewById(rootView, id);
      if (horizontalGuideline == null) {
        break missingId;
      }

      id = R.id.language_title;
      TextView languageTitle = ViewBindings.findChildViewById(rootView, id);
      if (languageTitle == null) {
        break missingId;
      }

      id = R.id.languages;
      TextView languages = ViewBindings.findChildViewById(rootView, id);
      if (languages == null) {
        break missingId;
      }

      id = R.id.location_title;
      TextView locationTitle = ViewBindings.findChildViewById(rootView, id);
      if (locationTitle == null) {
        break missingId;
      }

      id = R.id.map_fragment;
      FragmentContainerView mapFragment = ViewBindings.findChildViewById(rootView, id);
      if (mapFragment == null) {
        break missingId;
      }

      id = R.id.num_max_participants;
      TextView numMaxParticipants = ViewBindings.findChildViewById(rootView, id);
      if (numMaxParticipants == null) {
        break missingId;
      }

      id = R.id.num_participants_title;
      TextView numParticipantsTitle = ViewBindings.findChildViewById(rootView, id);
      if (numParticipantsTitle == null) {
        break missingId;
      }

      id = R.id.num_reg_participants;
      TextView numRegParticipants = ViewBindings.findChildViewById(rootView, id);
      if (numRegParticipants == null) {
        break missingId;
      }

      id = R.id.participants_dash;
      TextView participantsDash = ViewBindings.findChildViewById(rootView, id);
      if (participantsDash == null) {
        break missingId;
      }

      id = R.id.price_title;
      TextView priceTitle = ViewBindings.findChildViewById(rootView, id);
      if (priceTitle == null) {
        break missingId;
      }

      id = R.id.profile_img;
      ImageButton profileImg = ViewBindings.findChildViewById(rootView, id);
      if (profileImg == null) {
        break missingId;
      }

      id = R.id.profile_name;
      TextView profileName = ViewBindings.findChildViewById(rootView, id);
      if (profileName == null) {
        break missingId;
      }

      id = R.id.register_button;
      AppCompatButton registerButton = ViewBindings.findChildViewById(rootView, id);
      if (registerButton == null) {
        break missingId;
      }

      id = R.id.result_button;
      AppCompatButton resultButton = ViewBindings.findChildViewById(rootView, id);
      if (resultButton == null) {
        break missingId;
      }

      id = R.id.verticalGuideline;
      Guideline verticalGuideline = ViewBindings.findChildViewById(rootView, id);
      if (verticalGuideline == null) {
        break missingId;
      }

      id = R.id.verticalRightGuideline;
      Guideline verticalRightGuideline = ViewBindings.findChildViewById(rootView, id);
      if (verticalRightGuideline == null) {
        break missingId;
      }

      id = R.id.view_applicants_button;
      AppCompatButton viewApplicantsButton = ViewBindings.findChildViewById(rootView, id);
      if (viewApplicantsButton == null) {
        break missingId;
      }

      return new ActivityEventInfoBinding((ConstraintLayout) rootView, cancelButton, content,
          deleteButton, eventDate, eventDescription, eventDuration, eventDurationTitle, eventImg,
          eventLocation, eventPrice, eventRegisterDate, eventRegisterDateTitle, eventRegisterTime,
          eventTime, eventTimeTitle, eventTitle, horizontalGuideline, languageTitle, languages,
          locationTitle, mapFragment, numMaxParticipants, numParticipantsTitle, numRegParticipants,
          participantsDash, priceTitle, profileImg, profileName, registerButton, resultButton,
          verticalGuideline, verticalRightGuideline, viewApplicantsButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
